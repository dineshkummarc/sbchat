
/*!
 * socket.io-node
 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var crypto = require('crypto')
  , Store = require('socket.io').Store
  , assert = require('assert')
  , azure = require('azure');


/**
 * Exports the constructor.
 */

exports = module.exports = ServiceBus;
ServiceBus.Client = Client;

var serviceBusService = null;
/**
 * ServiceBus store.
 * Options:
 *     - nodeId (fn) gets an id that uniquely identifies this node
 *     - ServiceBus (fn) ServiceBus constructor, defaults to ServiceBus
 *     - ServiceBusPub (object) options to pass to the pub ServiceBus client
 *     - ServiceBusSub (object) options to pass to the sub ServiceBus client
 *     - ServiceBusClient (object) options to pass to the general ServiceBus client
 *     - pack (fn) custom packing, defaults to JSON or msgpack if installed
 *     - unpack (fn) custom packing, defaults to JSON or msgpack if installed
 *
 * @api public
 */

function ServiceBus (opts) {
  opts = opts || {};

  // node id to uniquely identify this node
  var nodeId = opts.nodeId || function () {
    // by default, we generate a random id 
    return Math.abs(Math.random() * Math.random() * Date.now() | 0);
  };

  this.nodeId = nodeId();
  serviceBusService = azure.createServiceBusService();
  
  // packing / unpacking mechanism
  if (opts.pack) {
    this.pack = opts.pack;
    this.unpack = opts.unpack;
  } else {
    try {
      var msgpack = require('msgpack');
      this.pack = msgpack.pack;
      this.unpack = msgpack.unpack;
    } catch (e) {
      this.pack = JSON.stringify;
      this.unpack = JSON.parse;
    }
  }

  function initializeTopic(topic, callback) {
    console.log(topic);
    serviceBusService.createTopicIfNotExists(topic,function(error){
      if(error){
        throw error;
        return;
      }
      return callback();
    });
    return;
  }

  function callStore() {
    console.log("store");
    Store.call(this, opts);
  }
  initializeTopic('sbchat', callStore);
  


  /*
  var ServiceBus = opts.ServiceBus || require('ServiceBus')
    , ServiceBusClient = ServiceBus.ServiceBusClient;

  // initialize a pubsub client and a regular client
  if (opts.ServiceBusPub instanceof ServiceBusClient) {
    this.pub = opts.ServiceBusPub;
  } else {
    opts.ServiceBusPub || (opts.ServiceBusPub = {});
    this.pub = ServiceBus.createClient(opts.ServiceBusPub.port, opts.ServiceBusPub.host, opts.ServiceBusPub);
  }
  if (opts.ServiceBusSub instanceof ServiceBusClient) {
    this.sub = opts.ServiceBusSub;
  } else {
    opts.ServiceBusSub || (opts.ServiceBusSub = {});
    this.sub = ServiceBus.createClient(opts.ServiceBusSub.port, opts.ServiceBusSub.host, opts.ServiceBusSub);
  }
  if (opts.ServiceBusClient instanceof ServiceBusClient) {
    this.cmd = opts.ServiceBusClient;
  } else {
    opts.ServiceBusClient || (opts.ServiceBusClient = {});
    this.cmd = ServiceBus.createClient(opts.ServiceBusClient.port, opts.ServiceBusClient.host, opts.ServiceBusClient);
  }

  Store.call(this, opts);

  this.sub.setMaxListeners(0);
  this.setMaxListeners(0);
  */
};

/**
 * Inherits from Store.
 */

ServiceBus.prototype.__proto__ = Store.prototype;


/**
 * Publishes a message.
 *
 * @api private
 */

ServiceBus.prototype.publish = function (name) {
  console.log('publish');
  var args = Array.prototype.slice.call(arguments, 1);

  var message = {
    body: this.pack({ nodeId: this.nodeId, args: args }),
    customProperties: {
      name: name
    }
  };

  serviceBusService.sendTopicMessage('sbchat', message, function(error) {
    console.log('foo');
    if (error) {
      throw error;
      return;
    }
    console.log('sent', message);
    this.emit.apply(this, ['publish', name].concat(args));
  });

};

/**
 * Subscribes to a channel
 *
 * @api private
 */

ServiceBus.prototype.subscribe = function (name, consumer, fn) {

  function onCreateSubscription(error) {
    if (!error) {
      console.log('name=', name);
      serviceBusService.deleteRule('sbchat', name, onDeleteRule);
      return;
    }
  }

  function onDeleteRule(error) {
    if (!error) {
      var ruleOptions = {
        sqlExpressionFilter: "name='" + name + "'"
      };
      serviceBusService.createRule('sbchat', name, ruleOptions, onCreateRule);
      return;
    }
  }

  function onCreateRule(error) {
    if (!error) {
      console.log("rule " + name + " created");
    }
  }

  function emit() {
    this.emit('subscribe', name, consumer, fn);
  };

  console.log('creating subscription');
  serviceBusService.createSubscription('sbchat', name, onCreateSubscription);

  //this.sub.subscribe(name);
  /*
  if (consumer || fn) {
    var self = this;

    self.sub.on('subscribe', function subscribe (ch) {
      if (name == ch) {
        function message (ch, msg) {
          if (name == ch) {
            msg = self.unpack(msg);

            // we check that the message consumed wasnt emitted by this node
            if (self.nodeId != msg.nodeId) {
              consumer.apply(null, msg.args);
            }
          }
        };

        self.sub.on('message', message);

        self.on('unsubscribe', function unsubscribe (ch) {
          if (name == ch) {
            self.sub.removeListener('message', message);
            self.removeListener('unsubscribe', unsubscribe);
          }
        });

        self.sub.removeListener('subscribe', subscribe);

        fn && fn();
      }
    });
  }

  this.emit('subscribe', name, consumer, fn);
  */
};

/**
 * Unsubscribes
 *
 * @api private
 */

ServiceBus.prototype.unsubscribe = function (name, fn) {
  /*
  this.sub.unsubscribe(name);

  if (fn) {
    var client = this.sub;

    client.on('unsubscribe', function unsubscribe (ch) {
      if (name == ch) {
        fn();
        client.removeListener('unsubscribe', unsubscribe);
      }
    });
  }

  this.emit('unsubscribe', name, fn);
  */
};

/**
 * Destroys the store
 *
 * @api public
 */

ServiceBus.prototype.destroy = function () {
  Store.prototype.destroy.call(this);

  this.pub.end();
  this.sub.end();
  this.cmd.end();
};

/**
 * Client constructor
 *
 * @api private
 */

function Client (store, id) {
  console.log('client ctor');
  Store.Client.call(this, store, id);
};

/**
 * Inherits from Store.Client
 */

Client.prototype.__proto__ = Store.Client;

/**
 * ServiceBus hash get
 *
 * @api private
 */

Client.prototype.get = function (key, fn) {
  console.log('get');
  
  /*
  this.store.cmd.hget(this.id, key, fn);
  return this;
  */
};

/**
 * ServiceBus hash set
 *
 * @api private
 */

Client.prototype.set = function (key, value, fn) {
  console.log('set');
  
  /*
  this.store.cmd.hset(this.id, key, value, fn);
  return this;
  */
};

/**
 * ServiceBus hash del
 *
 * @api private
 */

Client.prototype.del = function (key, fn) {
  console.log('del');
  /*
  this.store.cmd.hdel(this.id, key, fn);
  return this;
  */
};

/**
 * ServiceBus hash has
 *
 * @api private
 */

Client.prototype.has = function (key, fn) {
  console.log('has');
  /*
  this.store.cmd.hexists(this.id, key, function (err, has) {
    if (err) return fn(err);
    fn(null, !!has);
  });
  return this;
  */
};

/**
 * Destroys client
 *
 * @param {Number} number of seconds to expire data
 * @api private
 */

Client.prototype.destroy = function (expiration) {
  if ('number' != typeof expiration) {
    this.store.cmd.del(this.id);
  } else {
    this.store.cmd.expire(this.id, expiration);
  }

  return this;
};
